<?php

/**
 * Provide a select options component to Webform. The values are 
 * populated via a call to _get_specialty_nodes, which returns 
 * an array of nodes.
 *
 */
function webform_select_options_webform_select_options_info() {
 $items = array();

   if (function_exists('_get_specialty_nodes')) {
        $items['specialty'] = array(
     'title' => t('Specialties'),
      'options callback' => '_get_specialty_nodes',
      );
   }

   // if (module_exists('views')) {
   //    $items['views'] = array(
   //         'title' => t('A view'),
   //         'options callback' => '_demo_get_view_options',
   //     );
   // }

  return $items;
}

/**
 * Returns an array of Specialty nodes keyed on the node ID.
 *
 */
function _get_specialty_nodes() {
   $nodes = array();
  
   $select = db_query(db_rewrite_sql("SELECT nid, title FROM 
              {node} WHERE type = 'specialty' ORDER BY title"));
    while ($node = db_fetch_object($select)) {
     $nodes[$node->nid] = $node->title;
   }
  return $nodes;
}


// For most folks, an easier and more sustainable option will be to create a View of the nodes that you want to display to your users, then implement the function below:
/**
 * Options callback for webform_select_options_info(). 
 * The assumption is that your view is displaying node data.
 *
 * @return array of items to populate the select list with.
 * @author Kosta Harlan
 */
// function _demo_get_view_options() {
//     // Change 'my_sample_view' to the machine name of your View.
//         $view = views_get_view('my_sample_view', true); 
//      $view->execute();
//        $items = array();
  
//    foreach ($view->result as $item) {
//     $full_node = node_load($item->nid);
//      $items[$item->nid] = $full_node->title;
//     }
//   return $items;
// }