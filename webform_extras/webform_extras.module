<?php

/**
 * Define components to Webform.
 *
 * @return array
 *   An array of components, keyed by machine name. Required properties are
 *   "label" and "description". The "features" array defines which capabilities
 *   the component has, such as being displayed in e-mails or csv downloads.
 *   A component like "markup" for example would not show in these locations.
 *   The possible features of a component include:
 *
 *     - csv
 *     - email
 *     - email_address
 *     - email_name
 *     - required
 *     - conditional
 *     - spam_analysis
 *     - group
 *
 *   Note that most of these features do not indicate the default state, but
 *   determine if the component can have this property at all. Setting
 *   "required" to TRUE does not mean that a component's fields will always be
 *   required, but instead give the option to the administrator to choose the
 *   requiredness. See the example implementation for details on how these
 *   features may be set.
 *
 *   An optional "file" may be specified to be loaded when the component is
 *   needed. A set of callbacks will be established based on the name of the
 *   component. All components follow the pattern:
 *
 *   _webform_[callback]_[component]
 *
 *   Where [component] is the name of the key of the component and [callback] is
 *   any of the following:
 *
 *     - defaults
 *     - edit
 *     - render
 *     - display
 *     - submit
 *     - delete
 *     - help
 *     - theme
 *     - analysis
 *     - table
 *     - csv_headers
 *     - csv_data
 *
 *   See the sample component implementation for details on each one of these
 *   callbacks.
 *
 * @see webform_components()
 */
function webform_extras_webform_component_info() {
    $components = array();
  
    $components['div'] = array(
      'label' => t('Div'),
      'description' => t('Html div wrapper.'),
      'features' => array(
        // This component includes an analysis callback. Defaults to TRUE.
        'analysis' => FALSE,
        // Add content to CSV downloads. Defaults to TRUE.
        'csv' => FALSE,
        // This component supports default values. Defaults to TRUE.
        'default_value' => FALSE,
        // This component supports a description field. Defaults to TRUE.
        'description' => FALSE,
        // Show this component in e-mailed submissions. Defaults to TRUE.
        'email' => FALSE,
        // Allow this component to be used as an e-mail FROM or TO address.
        // Defaults to FALSE.
        'email_address' => FALSE,
        // Allow this component to be used as an e-mail SUBJECT or FROM name.
        // Defaults to FALSE.
        'email_name' => FALSE,
        // This component may be toggled as required or not. Defaults to TRUE.
        'required' => FALSE,
        // This component supports a title attribute. Defaults to TRUE.
        'title' => TRUE,
        // This component has a title that can be toggled as displayed or not.
        'title_display' => FALSE,
        // This component has a title that can be displayed inline.
        'title_inline' => FALSE,
        // If this component can be used as a conditional SOURCE. All components
        // may always be displayed conditionally, regardless of this setting.
        // Defaults to TRUE.
        'conditional' => FALSE,
        // If this component allows other components to be grouped within it
        // (like a fieldset or tabs). Defaults to FALSE.
        'group' => TRUE,
        // If this component can be used for SPAM analysis, usually with Mollom.
        'spam_analysis' => FALSE,
        // If this component saves a file that can be used as an e-mail
        // attachment. Defaults to FALSE.
        'attachment' => FALSE,
        // If this component reflects a time range and should use labels such as
        // "Before" and "After" when exposed as filters in Views module.
        'views_range' => FALSE,
      ),
  
      // Specify the conditional behaviour of this component.
      // Examples are 'string', 'date', 'time', 'numeric', 'select'.
      // Defaults to 'string'.
      'conditional_type' => 'string',
      'file' => 'components/div.inc',
    );
  
    return $components;
  }

/**
 * Implements hook_form_alter().
 */
function webform_extras_form_webform_component_edit_form_alter(&$form, $form_state, $form_id) {
  $component_type = $form['type']['#value'];

  switch ($component_type) {
    // Remove unused class textfield on our custom component
    case 'div':
      $form['display']['css_classes']['#access'] = FALSE;

     break;
  }
}